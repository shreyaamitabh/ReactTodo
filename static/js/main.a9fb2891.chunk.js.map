{"version":3,"sources":["components/Header.js","components/Display.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","fontSize","fontFamily","textAlign","color","Component","Display","props","keyPress","bind","handleChanges","state","value","e","this","setState","target","console","log","action","keyCode","todos","action2","action3","action4","className","id","ListGroup","Form","Control","size","type","onKeyDown","onChange","placeholder","map","todo","Item","class","Check","onClick","textDecoration","status","work","display","Button","variant","Todo","addTodo","isComplete","filterList","deleteTodo","filterTodos","change","val","len","length","todos1","push","todo1","index","indexOf","splice","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9fb2891.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        const myStyle={\n            fontSize:\"90px\", \n            fontFamily:\"fantasy\", \n            textAlign:\"center\", \n            color: \"rgb(80, 92, 104)\"\n        }\n        return (\n            <div>\n                <p style={myStyle}>todos</p>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Header from './Header'\nimport Button from 'react-bootstrap/Button'\nimport './Display.css';\nimport Form from 'react-bootstrap/Form'\nclass Display extends Component {\n    constructor(props)\n    {\n        super(props);\n       this.keyPress= this.keyPress.bind(this);\n        this.handleChanges= this.handleChanges.bind(this);\n        this.state={\n            value:\"\"\n        }\n    }\n    handleChanges(e){\n        this.setState({\n            value:e.target.value\n        })\n        console.log(this.state.value);\n    }\n    keyPress(e, action){\n        if(e.keyCode == 13){\n            this.setState({\n                value:''\n            })\n            action(e.target.value);\n        }\n     }\n    render() {\n        const {todos, action, action2, action3, action4}= this.props;\n        \n        return (\n            <div className= \"container\" id=\"outerContainer\">\n                <Header />\n                 <ListGroup className=\"list-group\">\n                 <Form.Control size=\"lg\" type=\"text\"  value={this.state.value} onKeyDown={(e)=>this.keyPress(e,action)} onChange={(e)=>this.handleChanges(e)} placeholder=\"What needs to be done?\" />\n                 </ListGroup>\n            <ListGroup className=\"list-group\">\n                {todos.map(todo =>{\n                    return (\n                        <ListGroup.Item class=\"list-container\">\n                <Form.Check className=\"list-item\"\n                    type=\"checkbox\" onClick={()=>action2(todo.id)}\n                /><p className=\"list-item\" style={{textDecoration: todo.status===\"completed\"?\"line-through\":\"none\"}}>{todo.work}<span class=\"close\" onClick={()=>action4(todo)} >x</span></p>\n                </ListGroup.Item>\n                    )\n                })}\n                 </ListGroup>\n                <ListGroup className=\"list-group\" >\n                    <div style={{display:\"inline-block\"}}>\n                <Button className=\"btn\" variant=\"outline-secondary\" onClick={()=>action3(\"\")}>All</Button>{'  '}\n                <Button className=\"btn\" variant=\"outline-secondary\" onClick={()=>action3(\"active\")}>Active</Button>{'  '} \n                <Button className=\"btn\" variant=\"outline-secondary\" onClick={()=>action3(\"completed\")}>Completed</Button>{'  '}\n                </div>\n                 </ListGroup>\n             \n            </div>\n        );\n    }\n}\n\nexport default Display;","import React, { Component } from 'react';\nimport Display from './Display.js';\nclass Todo extends Component {\n    constructor()\n    {\n        super();\n        this.addTodo= this.addTodo.bind(this);\n        this.isComplete= this.isComplete.bind(this);\n        this.filterList= this.filterList.bind(this);\n        this.deleteTodo= this.deleteTodo.bind(this);\n        this.state={\n            todos:[\n            {\n                id: \"0\",\n                work: \"Do this\",\n                status: \"active\"\n            },\n            {\n                id: \"1\",\n                work: \"Do that\",\n                status: \"active\"\n            },\n            {\n                id: \"2\",\n                work: \"Do love\",\n                status: \"completed\"\n            }\n        ],\n        filterTodos: [],\n        change:false\n        }\n    }\n    addTodo(val){\n        let len= this.state.todos.length;\n        let todos1= [...this.state.todos];\n        todos1.push({\n            work:val,\n            status:\"active\",\n            id:len\n        })\n        this.setState({\n            todos:todos1,\n           change:false\n        })\n    }\n    isComplete(id){\n       let todo1= [...this.state.todos]\n       todo1[id]={...todo1[id], status:\"completed\"}\n       this.setState({\n           todos:todo1\n       })\n    }\n    deleteTodo(todo){\n        console.log(todo);\n        let todos1 = [...this.state.todos]; \n        let index = todos1.indexOf(todo)\n        console.log(index);\n        if (index !== -1) {\n          todos1.splice(index, 1);\n          this.setState({todos: todos1, change:false});\n        }\n    }\n    filterList(filter)\n    {\n        \n        if(filter===\"\")\n        this.setState({\n           filterTodos:this.state.todos,\n           change:true\n        })\n        else{\n        let todos1= this.state.todos.filter(todo=>{\n           return todo.status===filter\n        })\n        this.setState({\n            filterTodos:todos1,\n            change:true\n        })\n    }\n    }\n    render() {\n        return (\n            <div>\n              {!this.state.change?<Display action={this.addTodo} todos={this.state.todos} action2={this.isComplete} action3={this.filterList} action4={this.deleteTodo} /> : <Display action={this.addTodo} todos={this.state.filterTodos} action2={this.isComplete} action3={this.filterList} action4={this.deleteTodo}  />}  \n            </div>\n        );\n    }\n}\n\nexport default Todo;","import React from 'react';\nimport './App.css';\n\nimport Todo from './components/Todo'\nfunction App() {\n  return (\n    <div  className=\"App\">\n   <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}